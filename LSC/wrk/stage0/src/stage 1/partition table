		  A |CHSFIRST|T |CHS LAST|LBA FIRST  |LBA COUNT  |
		  A |C  H  S |  |C  H   S|           |           |		  
----------------------------------------------------------
000001be  80|01 01 00|04|0f 3f 2a|3f 00 00 00|11 a9 00 00|
000001ce  00|00 01 2b|06|0f 3f 7f|50 a9 00 00|b0 4e 01 00|
000001de  00|00 00 00|00|00 00 00|00 00 00 00|00 00 00 00|
000001fe  00|00 00 00|00|00 00 00|00 00 00 00|00 00 00 00|

----------------------------------------------------------
/dev/loop0
----------------------------------------------------------
Disk /dev/loop0: 66 MB, 66060288 bytes
16 heads, 63 sectors/track, 128 cylinders, total 129024 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

      Device Boot      Start         End      Blocks   Id  System
/dev/loop0p1   *          63       43343       21640+   4  FAT16 <32M
/dev/loop0p2           43344      129023       42840    6  FAT16

 43343 + 1 - 63    =  43281 * 512 = 22159872
129023 + 1 - 43344 =  85680 * 512 = 43868160


----------------------------------------------------------
If everything is ok, run fdisk (this time without -lu) on /dev/loop0 and change the partition type of the second partition to 0x81, indicating a MINIX file system.

t -> 2 -> 81 -> w
----------------------------------------------------------

Partition	Start offset	Length
#1			   63 * 512		22159872
#2			43344 * 512		43868160

Partition	Start offset	Length
#1			   32256		22159872
#2			22192128 		43868160


MAN:
losetup [{-e|-E} encryption] [-o offset] [--sizelimit limit]  [-p pfd] [-r] {-f[--show]|loopdev} file

------------------------------------------------------------------------
masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo fsck.msdos -v /dev/loop1
dosfsck 3.0.9 (31 Jan 2010)
dosfsck 3.0.9, 31 Jan 2010, FAT32, LFN
Checking we can access the last sector of the filesystem
Boot sector contents:
System ID "FreeDOS "
Media byte 0xf8 (hard disk)
       512 bytes per logical sector
      2048 bytes per cluster
         1 reserved sector
First FAT starts at byte 512 (sector 1)
         2 FATs, 16 bit entries
     22016 bytes per FAT (= 43 sectors)
Root directory starts at byte 44544 (sector 87)
       512 root directory entries
Data area starts at byte 60928 (sector 119)
     10790 data clusters (22097920 bytes)
63 sectors/track, 16 heads
        63 hidden sectors
     43281 sectors total
Checking for unused clusters.
/dev/loop1: 70 files, 593/10790 clusters
------------------------------------------------------------------------
masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo mkfs.minix -v /dev/loop2
14288 inodes
42840 blocks
Firstdatazone=903 (903)
Zonesize=1024
Maxsize=2147483647
------------------------------------------------------------------------
masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo fsck.minix -vfs /dev/loop2
Forcing filesystem check on /dev/loop2.
14288 inodes
42840 blocks
Firstdatazone=903 (903)
Zonesize=1024
Maxsize=2147483647
Filesystem state=1
namelen=30


     1 inodes used (0%)
   904 zones used (2%)

     0 regular files
     1 directories
     0 character device files
     0 block device files
     0 links
     0 symbolic links
------
     1 files


------------------------------------------------------------------------
Size Bytes / Block = Byte/Block
43868160   / 42840 = 1024 = Zone Size






------------------------------------------------------------------------
The boot block takes exactly one block and contains the volume boot record. 
The superblock takes another block and contains information (see Table 4) about the layout of the file system.


Each i-node in the I-nodes area occupies 64 bytes and is used to hold metadata (see Table 5)
about one file system entry (file, directory, ...). The number of blocks used for i-nodes is
decided at format time and is stored in the superblock.


The Data area is usually the largest one and holds the contents of files and directories. Its
blocks are grouped into zones, with each zone representing 2n blocks, for some n >= 0.


The I-nodes bitmap area has one bit per existing i-node and is used to find free i-nodes in the
I-nodes area. 
Similarly, the Zone bitmap has one bit for each zone in the Data area and is used to find free zones in it.



/*
 * This is the original minix inode layout on disk. Note the 8-bit gid and atime and ctime.
    = 16 + 16 + 32 + 32 + 8 + 8 + 16*9 =  256 bytes
 */
struct minix_inode {
	__u16 i_mode;
	__u16 i_uid;
	__u32 i_size;
	__u32 i_time;
	__u8  i_gid;
	__u8  i_nlinks;
	__u16 i_zone[9];
};

/*
 * The new minix inode has all the time entries, as well as
 * long block numbers and a third indirect block (7+1+1+1
 * instead of 7+1+1). Also, some previously 8-bit values are
 * now 16-bit. The inode is now 64 bytes instead of 32.
   = 16 + 16 + 16 + 16 + 32 + 32 + 32 + 32 + 32*10 = 512 bytes
 */
struct minix2_inode {
	__u16 i_mode;
	__u16 i_nlinks;
	__u16 i_uid;
	__u16 i_gid;
	__u32 i_size;
	__u32 i_atime;
	__u32 i_mtime;
	__u32 i_ctime;
	__u32 i_zone[10];
};

/*
 * minix super-block data on disk
   = 16 + 16 + 16 + 16 + 16 + 16 + 32 + 16 + 16 + 32 = 192 bytes
 */
struct minix_super_block {
	__u16 s_ninodes;
	__u16 s_nzones;
	__u16 s_imap_blocks;
	__u16 s_zmap_blocks;
	__u16 s_firstdatazone;
	__u16 s_log_zone_size;
	__u32 s_max_size;
	__u16 s_magic;
	__u16 s_state;
	__u32 s_zones;
};

/*
 * V3 minix super-block data on disk
   = 32 + 16 + 16 + 16 +16 + 16 + 16 + 32 + 32 + 16 + 16 + 16 + 8 = 232 bytes
 */
struct minix3_super_block {
	__u32 s_ninodes;
	__u16 s_pad0;
	__u16 s_imap_blocks;
	__u16 s_zmap_blocks;
	__u16 s_firstdatazone;
	__u16 s_log_zone_size;
	__u16 s_pad1;
	__u32 s_max_size;
	__u32 s_zones;
	__u16 s_magic;
	__u16 s_pad2;
	__u16 s_blocksize;
	__u8  s_disk_version;
};

/*
= 24 bytes
*/
struct minix_dir_entry {
	__u16 inode;
	char name[0];
};
/*
= 40 bytes
*/
struct minix3_dir_entry {
	__u32 inode;
	char name[0];
};

 -------------------------------------------------------> Boot Block = 1 Block. Contains Boot record  
 |  ----------------------------------------------------> Super Block = 1 Block. Contains Information about the layout of the filesystem
 |  |  -------------------------------------------------> INodes Bitmap.  The I-nodes bitmap area has one bit per existing i-node and is used to find free i-nodes in the I-nodes area 
 |  |  |        ----------------------------------------> Zone Bitmap. has one bit for each zone in the Data area and is used to find free zones in it
 |  |  |        |			----------------------------> INodes. Each inode take 64 bytes and hold metadata. The number of blocks used for i-nodes is decided at format time and is stored in the superblock.
 |  |  |        |			|              -------------> Data. Its blocks are grouped into zones, with each zone representing 2n blocks, for some n >= 0.
 |  |  |        |			|              |
 |  |  |        |			|			   |
 _  _  _______  __________  _____________  _______________________________
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 
| || || || || || || || || || || || || || || || || || || || || || || || || |
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 
 
 
masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo hd lsc-hd63-flat.img  -s 22192128 -n 2048
0152a000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0152a200  f6 f6 f6 f6 f6 f6 f6 f6  f6 f6 f6 f6 f6 f6 f6 f6  |................|
*
0152a400  d0 37 00 00 02 00 06 00  87 03 00 00 ff ff ff 7f  |.7..............|
0152a410  78 24 00 00 58 a7 00 00  00 00 00 00 00 00 00 00  |x$..X...........|
0152a420  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0152a800

Partition Start/Boot Block: 22192128
SuperBlock				  : 22192128 + 1024
Inodes Bitmap			  : 22192128 + 1024 + 1024
Zone Bitmap				  : 22192128 + 1024 + 1024 + 2 * 1024
Inodes					    : 22192128 + 1024 + 1024 + 2 * 1024 + 6*1024 
Data					      :




Table 3 – Second partition block and zone sizes
Block size (in bytes) : 1024
Zone size (in bytes)  : 1024

Table 4 – Second partition superblock
	struct minix_super_block {
		__u16 s_ninodes;
		__u16 s_nzones;
		__u16 s_imap_blocks;
		__u16 s_zmap_blocks;
		__u16 s_firstdatazone;
		__u16 s_log_zone_size;
		__u32 s_max_size;
		__u16 s_magic;
		__u16 s_state;
		__u32 s_zones;
	};
masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo hexdump lsc-hd63-flat.img  -s 22193152 -n 1024
152a400 37d0 0000 0002 0006 0387 0000 ffff 7fff
152a410 2478 0000 a758 0000 0000 0000 0000 0000
152a420 0000 0000 0000 0000 0000 0000 0000 0000
*
152a800

s_ninodes 		  : 37d0 			= 14288
s_nzones 		    : 0000			= 0 
s_imap_blocks 	: 0002			= 2
s_zmap_blocks 	: 0006			= 6
s_firstdatazone : 0387			= 903
s_log_zone_size : 00 00			= 0
s_max_size 		  : 7fff ffff		= 2147483647
s_magic 		    : 2478			= 2478
s_state 		    : 00 00			= 0 
s_zones 		    : 0000 a758		= 42840

Table 5 – Root directory i-node (incomplete)
	struct minix2_inode {
		__u16 i_mode;
		__u16 i_nlinks;
		__u16 i_uid;
		__u16 i_gid;
		__u32 i_size;
		__u32 i_atime;
		__u32 i_mtime;
		__u32 i_ctime;
		__u32 i_zone[10];
	};

masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo hexdump lsc-hd63-flat.img  -s 22202368 -n 1024
152c800 41ed 0002 03e8 03e8 0040 0000 4f14 4e99
152c810 4f14 4e99 5314 4e99 0387 0000 0000 0000
152c820 0000 0000 0000 0000 0000 0000 0000 0000
*
152cc00

i_mode 			  : 41ed			  = 16877
i_nlinks 		  : 0002			  = 2
i_uid 			  : 03e8			  = 1000
i_gid 			  : 03e8			  = 1000
i_size 			  : 0000 0040	  = 64
i_atime 		  : 4e99 4f14 	= 1318670100
i_mtime 		  : 4e99 4f14	  = 1318670100
i_ctime 		  : 4e99 4f14	  = 1318670100
i_zone[0] 		: 0000 0387	  = 903 -> 903*1024 = E1C00 = 924672 -> 23116800
i_zone[1] 		: 0000 0000 	= 0

Table 6 – Root directory entries
struct minix_dir_entry {
	__u16 inode;
	char name[0];
};

masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo hd lsc-hd63-flat.img  -s 23116800 -n 1024
0160bc00  01 00 2e 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc10  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc20  01 00 2e 2e 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc30  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc40  00 00 2e 62 61 64 62 6c  6f 63 6b 73 00 00 00 00  |...badblocks....|
0160bc50  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0160c000


masterzdran@TahuwaHuwai:~/WorkingArea/Isel/LSC/dsk$ sudo hd lsc-hd63-flat.img  -s 23116800 -n 1024
0160bc00  01 00 2e 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc10  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc20  01 00 2e 2e 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc30  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
0160bc40  02 00 69 6e 63 6c 75 64  65 5f 6c 69 6e 75 78 5f  |..include_linux_|
0160bc50  6d 69 6e 69 78 5f 66 73  2e 68 00 00 00 00 00 00  |minix_fs.h......|
0160bc60  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
0160c000

# 	inode			name
0   0001 			.
1   0001 			..
2   0002 			include_linux_minix_fs.h



